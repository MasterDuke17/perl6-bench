# the code is ported from: http://wiki.luajit.org/Allocation-Sinking-Optimization

# this benchmark is useful for Allocation Sinking Optimization or Escape Analysis Optimization

# Point Class Benchmarks

# Here's the runtime for the point class in seconds (YMMV). Lower is better:
# Time  Point object    VM/Compiler
# 140.0 Lua table       Lua 5.1.5
# 26.9  Lua table       LuaJIT 2.0 git HEAD -O-sink
# 10.9  FFI struct      LuaJIT 2.0 git HEAD -O-sink
# 0.2   Lua table       LuaJIT 2.0 git HEAD -O+sink
# 0.2   FFI struct      LuaJIT 2.0 git HEAD -O+sink
# 0.2   C++ class       GCC 4.4.3 -O2 (or -O3)
# 1.2   Java class      JVM/Hotspot 1.7.0_05
# 6600+ Perl6 class     Rakudo/MoarVM

use v6;

class Point {
    has num $.x;
    has num $.y;

    method add(Point $b) {
       return Point.new(:x($!x + $b.x), :y($!y + $b.y));
    }
}

my int $i = 0;
my Point $a = Point.new(:x(1.5e0), :y(2.5e0));
my Point $b = Point.new(:x(3.25e0), :y(4.75e0));

while $i < 100000000 {
    $a = $a.add($b).add($b);
    $i = $i + 1;
}

print $a.x, $a.y;
