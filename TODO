* Top tasks
  + Bring forward existing JS-targeting compilers to new component framework
  + Test and update components for pmurias' nqp-js and rakudo-js compilers
* Features
  + Check for prereqs (e.g. JDK 7) during setup command
  + Check for built compiler before timing, if not there, recommend build
  + Documentation
    - WIP: manpage/usage
    - WIP: data expected from each test, and analysis of results
  + Add platform info to timeall output:
    - OS version
    - uname -a
    - /proc/cpuinfo
    - /proc/meminfo
  + Add Pugs to known compilers
  + Output version of each compiler (plus platform summary) from analyze
  + Group tests and total by group in summaries
    - trivial, simulation, parsing, ...
  + Tag tests:
    - Query/total by tag
    - Run only tests in tag
* More tests!
  + Miscellaneous known-slow tasks:
    - qq:to// unindent
    - IO: bytes, chars, lines, slurp/spew
  + Import benchmarks from github:perl6/bench-scripts
    - non-str-comb.pl
    - pick-words.pl        # Needs support for data/
    - pascals_triangle.p6
    - recursion.p6
    - prime*.pl
    - trans-sprintf.pl
    - anagram.pl           # Needs support for data/
    - dice.pl
    - mandelbrot-*.pl
  + diakopter++'s ideas:
    - String split using fixed string
    - String split using regex
    - Closure creation/invocation
    - Argument passing, for different numbers of arguments
    - Lexical/dynamic lookup, with varying depth
    - Raw object (bare class) creation, both new anon class, and new on existing class
    - Object creation in class with attributes
    - Attribute set/get, including native types where available
    - Single Unicode property lookup in a regex a bunch of times
    - Multiple Unicode property lookup in a regex a bunch of times
    - Multimethod dispatch
    - Multisub dispatch
    - Method v. sub for same operation, e.g. @array.push(...) v. push @array, ...
  + colomon++'s ideas:
    - Ten most frequently used words in Hamlet and not Much Ado About Nothing
      . http://perl6advent.wordpress.com/2012/12/13/day-13-bags-and-sets/
    - 'is cached' versus non-cached performance
      . fact(10000) + fact(10001)  # Factorial, cache only hits on multiple calls
      . fib(30)                    # Fibonnaci, cache hits for just a single call
  + Known performance changes
    - Rakudo
      . commits a9f3c63d3aa9854ad4e5ab05b0809659db42a0ec, 0d3c9b08fd28214d34f68fb222ae39aad84c16f0, b41219e4f001d6029e3bdb6adb69198376f0a085 (constant-fold stringy ops and &defined)
      . commit 2696aab9 (revert double interpolation of quotes in regex)
      . commit 08b640344cfd2de9a44afc313959a75c6568bcc5 (repeated shift of large arrays/lists: @a.shift while @a;)
      .
      . commit fc9c3b6046a3ff3d8ec162437bdd61ac0c19928c (flat iterating a list of parcels: ((1, 2, 3) Z (4, 5, 6)) )
      . commit 1d4eb481ef5dc4e772042c896cda4a5b7b510d0c (unary hypers)
      . commit 0fde4a1e375a26da8d7b511aafdb6174e934b757 (parsing)
      . commit 2125adb2dc3f22f9fb877e3ea403d469037b729c (.map)
      . commit d6cd1e2bd19e03a81132a23b2025920577f84e37 (FIRST/NEXT/LAST)
      . commit 9fc3eb254f1d377bebd4f4f89adcec96848e7c3b (IO: .say for @some_list_of_strings)
      . commit 7ac6d1ea6d8352696ca32b41080e75777ba5f9c2 (Buf creation and listification)
      . commit 0a93f6e39eb970fa1e653b13695b97789ae4d03b (object creation; iterators)
      . commit 77d4dc1d8ef5c746a5c597341ae1f5e89d66ca24 (attribute access)
      . commit 80974191c53dae18bab4d5e60d5e17fd5413e886 (stripping trailing zeroes)
      . commit 437675e330460d0cf801d48a635c413d532e062f (Complex ops)
      . commit 30f5cc9624b9b46ecbff88a2c234e5c9383e21ce (MapIter: map over a range)
  + Find weak points in core design
    - Iterative v. recursive v. memoized recursive v. sequence method of finding solution
      . Fibonacci sequence
    - Parsing variants
      . Deep v. flat parse trees
      . Capturing v. non-capturing subrules
      . | v. || v. <[ ]>
      . ASCII v. Latin-1 v. UTF-8 Latin characters v. UTF-8 non-Latin v. other encodings
    - Standard types
      . Native v. object
      . Small numbers v. big numbers with Int or FatRat
      . Packed v. standard arrays
  + Standard CS tools
    - Basic data structures (core or implemented in terms of core)
      . string:     bit vector?, C string, unicode string, rope
      . hash-like:  hash, bag, set, enum, sparse array
      . list-like:  linked list, doubly linked list
      . array-like: tuple, stack, queue, deque, matrix, image
      . multilevel: HoH, AoA, HoA, AoH, etc.
      . tree-like:  binary tree, b-tree, trie
      . spatial:    quadtree, octree, k-d tree
      . graph-like: undirected graph, directed graph, DAG, weighted variants
      . sorted:     priority queue, sorted hash, search tree
    - Basic algorithms
      . string:     length, concat, join, extract/set/insert substring, char-at,
                    split/comb, reverse, change case, encode/decode, difference
      . sorting:    numeric, string, user-defined sort key or sort comparator
      . searching:  find: key, value, range, Nth item, substring, regex match
      . spatial:    nearest N neighbors, AABB test, frustum test, path/surface
      . tree:       insert, delete, visit all in pre-/in-/post-order
      . graph:      minimum spanning tree, DFS, BFS, A* pathfinding
  + Specific ideas
    - Construct a triangular sequence in an array, then print it
    - Round trip a CSV file, correctly handling escapes and non-ASCII chars
    - Round trip XML through a friendly internal structure (XML::Simple-ish)
    - Extract info from a PNG file
    - Compute positions for a particle system after N steps
    - Parse dotty file and generate graph data structure from it
  + Areas to cover
    - Something for big int
